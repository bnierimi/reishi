`#3 Contracts: Creating contracts
_by: t/bnierimi_
`

interface Party{
    name: string,
    address: hex,
}

interface Item{
    id: hex,
    name: string,
    quatity: int,
    unitPrice: float,
}

interface Contract {
    offer: {
        by: Party,
        items: Item[],
        amount: float
    }
    acceptance: {
        by: Party,
        timestamp: string
    }
    consideration: {
        amount: float,
        method: string
    }
    capacity: {
        sellerCapacity: bool,
        buyerCapacity: bool,
    }
    purpose: {
        buyerPurpose: string,
        sellerApproval: bool
    }
    mutuality: bool
    certainty: bool
}

contract OpenSourceStruct {
    require {
        self.seller: Party = Party{
            name: "tsurgeon",
            address: 0x308d3ef2e87f72f7d23e6de6
        };
        self.buyer: Party;
        self.terms: list = [
            self.buyer.name == "peedee" || self.buyer.name "mko",
        ];
    }

    props {
        self.signature: hex
        self.timestamp: string
    }

    __init__ {}

    def approve(self) {
        
    }
}

c = OpenSourceStruct()
c.terms